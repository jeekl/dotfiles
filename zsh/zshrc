# autoload wrapper - use this one instead of autoload directly
function zrcautoload() {
    emulate -L zsh
    setopt extended_glob
    local fdir ffile
    local -i ffound

    ffile=$1
    (( found = 0 ))
    for fdir in ${fpath} ; do
        [[ -e ${fdir}/${ffile} ]] && (( ffound = 1 ))
    done

    (( ffound == 0 )) && return 1
    if [[ $ZSH_VERSION == 3.1.<6-> || $ZSH_VERSION == <4->* ]] ; then
        autoload -U ${ffile} || return 1
    else
        autoload ${ffile} || return 1
    fi
    return 0
}

# Path to zsh configuration.
#export ZSH=$HOME/.config/dotfiles/zsh
export ZSH=$HOME/.zsh
fpath=(
    $ZSH/functions
    $ZSH/completion
    $fpath
)
# Load rest of configuration
for config_file ($ZSH/*.zsh) source $config_file

# check for user, if not running as root set $SUDO to sudo
(( EUID != 0 )) && SUDO='sudo' || SUDO=''
(( EUID != 0 )) && umask 002 || umask 022

# Load is-at-least() for more precise version checks
# Note that this test will *always* fail, if the is-at-least
# function could not be marked for autoloading.
zrcautoload is-at-least || is-at-least() { return 1 }


setopt append_history       # append history list to the history file (important
                            # for multiple parallel zsh sessions!)
is4 && setopt SHARE_HISTORY # import new commands from the history file also in
                            # other zsh-session
setopt extended_history     # save each command's beginning timestamp and the
                            # duration to the history file
is4 && setopt histignorealldups # If a new command line being added to the
                            # history list duplicates an older one, the older
                            # command is removed from the list
setopt histignorespace      # remove command lines from the history list when
                            # the first character on the line is a space
setopt auto_cd              # if a command is issued that can't be executed as a
                            # normal command, and the command is the name of a
                            # directory, perform the cd command to that directory
setopt extended_glob        # in order to use #, ~ and ^ for filename generation
                            # grep word *~(*.gz|*.bz|*.bz2|*.zip|*.Z) ->
                            # -> searches for word not in compressed files
                            # don't forget to quote '^', '~' and '#'!
setopt longlistjobs         # display PID when suspending processes as well
setopt notify               # report the status of backgrounds jobs immediately
setopt hash_list_all        # Whenever a command completion is attempted,
                            # make sure the entire command path is hashed first.
setopt completeinword       # not just at the end
setopt nohup                # and don't kill them, either
setopt auto_pushd           # make cd push the old directory onto the directory
                            # stack.
setopt nonomatch            # try to avoid the 'zsh: no matches found...'
setopt nobeep               # avoid "beep"ing
setopt pushd_ignore_dups    # don't push the same dir twice.
setopt noglobdots           # * shouldn't match dotfiles. ever.
setopt noshwordsplit        # use zsh style word splitting
setopt unset                # don't error out when unset parameters are used

# setting some default values

NOCOR=${NOCOR:-0}
NOMENU=${NOMENU:-0}
NOPRECMD=${NOPRECMD:-0}
COMMAND_NOT_FOUND=${COMMAND_NOT_FOUND:-0}
BATTERY=${BATTERY:-0}
ZSH_NO_DEFAULT_LOCALE=${ZSH_NO_DEFAULT_LOCALE:-0}

# locale setup
if (( ZSH_NO_DEFAULT_LOCALE == 0 )); then
    xsource "/etc/default/locale"
fi
for var in LANG LC_ALL LC_MESSAGES ; do
    [[ -n ${(P)var} ]] && export $var
done
xsource "/etc/sysconfig/keyboard"
TZ=$(xcat /etc/timezone)

# color setup for ls:
check_com -c dircolors && eval $(dircolors -b)
# color setup for ls on OS X:
isdarwin && export CLICOLOR=1

REPORTTIME=5       # report about cpu-/system-/user-time of
                   # command if running longer than 5 seconds
watch=(notme root) # watch for everyone but me and root

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

## toggle the ,. abbreviation feature on/off
# NOABBREVIATION: default abbreviation-state
#                 0 - enabled (default)
#                 1 - disabled
NOABBREVIATION=${NOABBREVIATION:-0}

# autoloading
zrcautoload zmv    # who needs mmv or rename?
zrcautoload history-search-end

# completion system
if zrcautoload compinit ; then
    compinit -u || print 'Notice: no compinit available :('
else
    print 'Notice: no compinit available :('
    function zstyle { }
    function compdef { }
fi

is4 && zrcautoload zed # use ZLE editor to edit a file or function

is4 && \
    for mod in complist deltochar mathfunc ; do
    zmodload -i zsh/${mod} 2>/dev/null || print "Notice: no ${mod} available :("
done

# autoload zsh modules when they are referenced
if is4 ; then
    zmodload -a  zsh/stat    zstat
    zmodload -a  zsh/zpty    zpty
    zmodload -ap zsh/mapfile mapfile
fi

DIRSTACKSIZE=${DIRSTACKSIZE:-20}
DIRSTACKFILE=${DIRSTACKFILE:-${HOME}/.zdirs}

if [[ -f ${DIRSTACKFILE} ]] && [[ ${#dirstack[*]} -eq 0 ]] ; then
    dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
    # "cd -" won't work after login by just setting $OLDPWD, so
    [[ -d $dirstack[0] ]] && cd $dirstack[0] && cd $OLDPWD
fi

# Use hard limits, except for a smaller stack and no core dumps
unlimit
is425 && limit stack 8192

# Start completion system
# NOMENU=1 # No menu completion puh-leeeze.
is4 && grmlcomp

zrcautoload lookupinit && lookupinit

# executed for interactive shells

if [ -f ~/.config/ssh-agent ]; then
    source ~/.config/ssh-agent
fi

if [ -z "$SSH_AUTH_SOCK" ] || [ ! -w "$SSH_AUTH_SOCK" ]; then
    ssh-agent -s > ~/.config/ssh-agent && \
        source ~/.config/ssh-agent     && \
        ssh-add
fi

source plugins/*/*.zsh

source-host-config
